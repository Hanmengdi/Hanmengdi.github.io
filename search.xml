<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>The Great Gatsby</title>
      <link href="/2023/05/27/%E3%80%8A%E4%BA%86%E4%B8%8D%E8%B5%B7%E7%9A%84%E7%9B%96%E8%8C%A8%E6%AF%94%E3%80%8B/"/>
      <url>/2023/05/27/%E3%80%8A%E4%BA%86%E4%B8%8D%E8%B5%B7%E7%9A%84%E7%9B%96%E8%8C%A8%E6%AF%94%E3%80%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="《了不起的盖茨比》"><a href="#《了不起的盖茨比》" class="headerlink" title="《了不起的盖茨比》"></a>《了不起的盖茨比》</h2><p>2023年5月27日，读完了五月的阅读《了不起的盖茨比》</p><p>单从表面来看这本书，我只觉得是一个深情专一的一个男人对自己曾经初恋的女孩的挽回。</p><p>​      书中写了女主黛西在年轻的时候和当兵的盖茨比谈恋爱，但由于军队的原因盖茨比被派遣出国，两人的恋情因此终止，若干年后，盖茨比从战场中归来之后，黛西已经是上流社会汤姆的妻子（汤姆也不是什么好鸟，一直出轨但却说爱着自己的妻子），并且生了一个女儿，当然这中间还有一些故事，盖茨比为了接近黛西，在西卵村买了一个豪宅与故事中的我（即尼克），做了邻居，并且与黛西所住的东卵村隔湾相望。盖茨比一步一步地接近黛西，让黛西承认自己并不爱自己的丈夫汤姆，而是爱着自己，虽然黛西已经承认了，但是事实却如此残酷，两人也未能在一起，有一次黛西开车盖茨比坐在车上，撞死了威尔逊的妻子，威尔逊直接发疯，向汤姆问罪人是谁，最后威尔逊潜入盖茨比的家杀了盖茨比，自己也死了。黛西选择了逃避，即使自己才是真正的凶手，她最后还是与汤姆一起生活。</p><p>​      这个结局实在悲惨。整本书像一场游戏，黛西和汤姆是玩游戏的人，盖茨比和威尔逊是玩物，而我则是一个旁观者。玩游戏的时候，黛西对盖茨比深深的动了情，但是当游戏出了一点意外，其中有人死了之后，谁是玩物谁是玩家一目了然，即使黛西是真正的杀人凶手，但是汤姆还是把罪转移到了盖茨比身上，虽然盖茨比自身也愿意承担这个罪行（或许这就是爱吧），最后黛西在汤姆的掩护下选择了逃避到了其他地方，游戏结束，为了游戏牺牲的有盖茨比，还有威尔逊的妻子。</p><p>​      盖茨比到死都还在想着黛西会给他打电话，然后一起私奔，但是结果并没有，此时的黛西，已经准备逃离，当盖茨比被杀之后，尼克邀请黛西来参加盖茨比的葬礼时，黛西也在汤姆的影响下选择了逃避，我的感想就是这个女人真的贱。</p><p>​      关于这场游戏谁是玩家，谁是玩物，真正的判断条件或许不是财富的多少，而是个人的出身，我和贝克，黛西，汤姆出身都很好，都是old money，而盖茨比的出身并不好，他的父母都是穷苦的农民，后来通过自己的自律和奋斗，以及一些投机取巧，做了一些违法的事情，赚到了富可敌国的财富，他才看上去和我们这些人平等（实际上并不平等），他自己也非常在意这个。这就是为什么最后在城里的时候当汤姆说出盖茨比真正的出身时，盖茨比会如此失态的原因。</p><p>​      小时候的盖茨比是如此自律，他相信自己是上帝之子，他要通过奋斗改变自己的人生，但是很不幸，上升的台阶已经被上流社会的人封死（这与当时写作的社会背景有关），这些经理也正好对应着书中最后的那一句话  </p><blockquote><p> <strong><em>“So we beat on, boats against the current, borne back ceaselessly into the past.”</em></strong></p><p>于是我们奋力前进，却如同逆水行舟，不停地被浪潮推回到过去</p></blockquote><p>​      少年时不可得之物会困其一生，或许盖茨比就是这样，少年时的遗憾他想尽力弥补，可是他想错了，他认为努力与金钱可以换来自己所失去的东西，可是他不知道有些东西是命中注定的，出生时没有这辈子也不会有（或许他知道，只是不愿意承认吧），到底是不是这样，其实我写很想知道，或许是吧，我既没有盖茨比的能力，也没有盖茨比的财富，或许在我身上也是这样吧，我会尽力不让遗憾发生。</p><p>​      最后盖茨比和黛西可能并不是一类人，黛西离开这个主角光环也只是非常平常的女孩，矫揉做作，物质，庸俗，当然最后还有漂亮，正是有这一点才会有这么多人为她神魂颠倒吧。盖茨比真正爱的，其实应该是自己心中想象的完美的那个情人黛西，她和黛西已经五年没有见面，黛西在这五年里到底变成了什么样子，盖茨比只能靠想象，她在盖茨比的想象中趋于完美，以至于当盖茨比即使见了真正的黛西也会以为是他想象中的那个人。</p><p>​      不得不感叹想象的力量太强大，这或许就是距离产生的美吧，如果两人天天在一起肯定不会产生这种感情，我觉得我应该也是因为距离想象一个人把她想象的太完美才导致现在这个样子吧。</p><p>​      关于这本书还有的解释是盖茨比追爱的破碎，正是美国梦的破碎，这要联系当时的时代情况来看，书中也写有一点关于这个的，出身上流的汤姆看不起出身卑微的盖茨比。不过我不想讨论这个，随便时代吧，我只觉得这是个爱情的遗憾，深情的人爱错了人。</p><p>….</p><p>六月，其他看些什么书，随便吧，打算买一本《文化苦旅》看看怎么样。</p><p>或许我应该列一个书单，大学应该看的书，过几天找找吧一定会列。</p><p>感觉在博客上写东西还是没有在纸质的日记本上写东西方便，一些想写的话感觉放在网上不合适，以后写读书感想还是在日记本上写吧，真正的想法用笔写在纸上才是最好的方法，在博客只做记录自己读的什么书。</p>]]></content>
      
      
      <categories>
          
          <category> 月读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 月读计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《双城记》</title>
      <link href="/2023/05/02/%E3%80%8A%E5%8F%8C%E5%9F%8E%E8%AE%B0%E3%80%8B/"/>
      <url>/2023/05/02/%E3%80%8A%E5%8F%8C%E5%9F%8E%E8%AE%B0%E3%80%8B/</url>
      
        <content type="html"><![CDATA[<p>在4月份阅读了这本书，简单回顾一下剧情并写点感悟。</p><p>书的第一章名为“死人复活”，其中的曼内特医生含冤入狱之后别人都以为他已经死了，但却成功出狱但患上了严重的精神疾病。这一章我认为是最有意思的，为全书的发展做了一个铺垫。</p><p>故事背景就是骄奢淫逸的侯爵压榨虐待普通民众，引起了民众的奋起反抗，爆发了法国大革命。</p><p>书中的德伐日夫人就是被压榨后埋下复仇种子的一个人，这也为她后面要对埃佛瑞蒙德家族的妻子、孩子赶尽杀绝的原因。</p><p>书中的男主名原性为埃佛瑞蒙德，原是法国的侯爵，但是受不了家族对穷人的压榨。放弃了爵位来到英国，当一名法语教师，结识了女主，也就是曼内特医生的女儿，曼内特小姐，露西。</p><p>但是当巴士底狱被攻陷，自己曾经忠实的仆人被无辜的逮捕时，达尔内依然踏上回国的路程，尽管危机重重。由于他的真是身份是侯爵所以很快就被逮捕到拉福斯监狱并随时可能上断头台，后来经过一系列的发展，以及他出狱又重新入狱，最后被处死之前卡尔顿来替换身份让他出狱，自己则被替他走向死亡。</p><p>书中让我印象最深刻的无疑是卡尔顿这个人物，明明自己有足够的才华能让自己飞黄腾达却自甘堕落酗酒成性（那是个酗酒的年代），甘愿当斯特莱佛的豺狗，自己深爱着一生的女儿露西，却深知不能得到她的爱，但是依然甘心为她付出自己的一切，当得知他们一家有生命危险时，自己毅然决然挺身而出，肉身作盾，牺牲了自己保全了他们一家四个人。</p><p>卡尔顿或许是默默无闻的大多数，爱而不得，但是这大多数中能像他一样甘愿献出自己生命的却又是极少部分，或许我也像卡尔顿一样爱而不得但是我肯定不能像他一样活出自己的生命。这或许就是他人格的高大之处。</p><p>另一个人物德伐日太太给人的印象也很深，他的姐姐，姐夫，父亲，哥哥全都被侯爵一家害死，自己则被藏到一个偏僻的地方躲了下来，心中埋下了复仇的种子，发誓要对侯爵以及一切特权阶级斩草除根，当攻占巴士底狱解放无辜囚犯时大快人心，但当她坚持要求要对无辜的达尔内一家斩草除根时，她已经失去了别人对她的同情，这就是书中最后所写的 ==<strong>“我看见巴萨、克莱、德伐日、复仇女神、陪审员、法官、一长串新的压迫者从被这个惩罚工具所摧毁的老压迫者们身上升起，又在这个惩罚工具还没有停止使用前被消灭”</strong>==，她已经变为了新的压迫阶级。</p><p>《双城记》中的双城应该指的是巴黎和伦敦，代表着法兰西和英格兰，“<strong>死人复活</strong>”也不止指的是曼内特医生出狱，也有书中最后卡尔顿虽然被处死但“<strong>也必复活</strong>”，法兰西经过大革命在血与火中复活，还有英格兰复活的希望，这正是题名为”<strong>双城记</strong>“的原因。</p><p>书中的开头很惊艳，原文是：</p><blockquote><p>It was the best of times, it was the worst of times, it was the age of wisdom, it was the age of foolishness, it was the epoch of belief, it was the epoch of incredulity, it was the season of Light, it was the season of Darkness, it was the spring of hope, it was the winter of despair, we had everything before us, we had nothing before us, we were all going direct to Heaven, we were all going direct the other way —in short, the period was so far like the present period, that some of its noisiest authorities insisted on its being received, for good or for evil, in the superlative degree of comparison only.</p></blockquote><p>经典名句了，不管看没看过这本书的人或多或少都听过这句话的解读。</p><p>这句话大概是在介绍时代背景吧，我感觉我也不是很懂，只是很惊艳于这个连续的排比。</p><p>书中大量使用了倒叙的手法，埋下了许多的铺垫，以至于第一次看时感觉有些情节很莫名其妙，不知道为什么要写这些东西，或许我应该有空时再看一遍这本书，再次感受一下法兰西在血与火中的重生。</p><p>五月份打算看《了不起的盖茨比》。</p>]]></content>
      
      
      <categories>
          
          <category> 月读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 月读计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于月读</title>
      <link href="/2023/04/22/%E5%85%B3%E4%BA%8E%E6%9C%88%E8%AF%BB/"/>
      <url>/2023/04/22/%E5%85%B3%E4%BA%8E%E6%9C%88%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<p>这个想法从上个超长寒假在家无聊，看了一本《百年孤独》中产生，从小学之后，已经很久没有感受到阅读的乐趣了，还记得小时候看了好几遍高尔基的童年三部曲，那种感觉很难忘怀。</p><p>在大一时看了《平凡的世界》，但总感觉没有领略到精髓，或许是心太浮躁，静不下来，难以用心感受。</p><p>以后计划每个月看一本书，无论什么种类随便看，这个计划已经被耽搁很久了，那么从现在开始吧！</p><p>第一本书就看《双城记》吧，在2023年4月5日就已经买了，但是现在还没看完。家里还有很多以前买的但没时间看的就慢慢看完吧。</p>]]></content>
      
      
      <categories>
          
          <category> 月读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 月读计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一点感想</title>
      <link href="/2023/02/15/%E4%B8%80%E7%82%B9%E6%84%9F%E6%83%B3/"/>
      <url>/2023/02/15/%E4%B8%80%E7%82%B9%E6%84%9F%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<h3 id="一点思考"><a href="#一点思考" class="headerlink" title="一点思考"></a>一点思考</h3><p>在大一上学期的时候因为一门在学习通的通识课忘了挂，得到了77。现在大二又因为一门算法训练课的慕课spoc没加入班级而没算期中成绩（我清楚地记得当时输入了一个验证码是加入了，现在想想有可能是加错了。。），95的期中成绩算作0而得到了78的总成绩。</p><p>想要在这种课程上得到高绩点，就得时刻小心谨慎，或许这种东西不适合我吧，我宁愿考试。</p><p>其他的通识选修课有一个66分的，还有没过班级平均分的思修、近代史、四史（以及我觉得这学期的马原估计顶多也就是班级平均分）。这种课程想得到高绩点别人说上课要举手回答问题，老师的话主动接，下课多找老师聊聊增进感情，甚至有的找到以前的高中老师，利用高中老师和大学老师的这层关系来给自己打一个高分、还有在军训上因为不满教官的打分加考多次后和同学动手的。</p><p>很明显我做不到通过找老师多聊天增进感情来得到高分的行为，更不用说后面的那些令人鄙视的行径，这tm都算什么本事。</p><p>也许我被绩点裹挟了，在一个不适合自己的赛道和一些不择手段的人竞争最终的结果不用说，但从中也学到了很多，可能是自己对一些感觉无所谓的小事没放在心上，最后才造成的现在这个结果，只能说这个评分标准和我两个都有问题。</p><p>既然这条路不适合，想来想去还是直接考试拿出真本事最适合我，可能这还是自己的高考思维没有转变吧。从今往后那些水课实在不喜欢，干脆就别学了，也没保研的绩点压力了。趁现在放开了大学不封校，好好感受应有的大学生活吧，专业课和基础的一些数学课以及英语才是真正要学的东西，别在没有意义的课程上浪费太多时间。好好感受就行了。</p>]]></content>
      
      
      <categories>
          
          <category> 随便写 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随便写 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k倍区间</title>
      <link href="/2023/02/04/k%E5%80%8D%E5%8C%BA%E9%97%B4/"/>
      <url>/2023/02/04/k%E5%80%8D%E5%8C%BA%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<h1 id="K倍区间"><a href="#K倍区间" class="headerlink" title="K倍区间"></a>K倍区间</h1><p>acwing 1230<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, k;</span><br><span class="line">ll s[N];    <span class="comment">//前缀和数组</span></span><br><span class="line">ll cnt[N];  <span class="comment">//cnt[i]表示模k余数为i的s[i]的个数 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;    <span class="comment">//数组长度，以及k </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;s[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        s[i] += s[i<span class="number">-1</span>];  <span class="comment">//计算前缀和</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ll maxk = <span class="number">0</span>;   <span class="comment">//k倍区间个数 </span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//为降低时间复杂度，将s[r] - s[l-1])%k == 0 转化为 s[r]%k == s[l-1]%k</span></span><br><span class="line">    cnt[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        maxk += cnt[s[i]%k];  <span class="comment">//先累加 某个数%k 与 s[i]%k相等的值</span></span><br><span class="line">        cnt[s[i]%k]++;        <span class="comment">//更新（加入当前循环的结果）取余为 s[i]%k 的值的个数</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; maxk &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>最难理解的莫过于最后的循环</p><p>把(s[r] - s[l-1]) % k == 0 中的l-1换为l，则由于l-1的范围在0~ r-1，则l的范围在1~r，<br>原式变为(s[r] - s[l]) % k == 0 再由数学知识变为 s[r] % k == s[l] % k，所以只需找到前面的取余结果与s[r]取余结果相同的数的个数即可。</p><p>cnt[i]表示为存放 某个数取余k余数为i的数的个数</p><p>maxk += cnt[s[i]%k];  <strong>先累加 某个数%k 与 s[i]%k相等的值</strong></p><p>再由cnt[s[i]%k]++; <strong>更新（加入当前循环的结果）取余为 s[i]%k 的值的个数</strong></p><p>cnt[0] = 0;是因为在进入i从1开始的循环时，余数为0的数已经有了一个了，即为s[0]。</p>]]></content>
      
      
      <categories>
          
          <category> c/c++算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前缀和 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>start</title>
      <link href="/2023/01/28/start/"/>
      <url>/2023/01/28/start/</url>
      
        <content type="html"><![CDATA[<p>start again!!!</p>]]></content>
      
      
      <categories>
          
          <category> 随便写 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随便写 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇Blog</title>
      <link href="/2023/01/20/%E7%AC%AC%E4%B8%80%E7%AF%87Blog/"/>
      <url>/2023/01/20/%E7%AC%AC%E4%B8%80%E7%AF%87Blog/</url>
      
        <content type="html"><![CDATA[<h3 id="在Hexo的第一篇Blog"><a href="#在Hexo的第一篇Blog" class="headerlink" title="在Hexo的第一篇Blog"></a>在Hexo的第一篇Blog</h3><p>​    起因还是在22年3月份实验室让做的一个hexo，当时随便做了一个什么也没有的网页了事了，距今已经十个月，今天突然想起，反正也没有什么事干，干脆把这个网站优化一下。但是事与愿违我以为搭好框架再随便改改一些前端的东西不就行了吗，还是想太简单了。首先就是命令全记不起来了（悲，不知如何下手，于是第一个做废了。 </p><p>​    第二个的时候基本快成功了，但不知为什么，配置在本地的hexo主页里的文章不管写什么打开全是hello world、公网的主页里文章打开还是主页，迷惑。这错误找遍了百度，谷歌全没有有点离谱。</p><p>​    第三个终于做好了就是这个从下载各种包和依赖，到部署到github，又在阿里云租了一个域名，基本每个环节都出了点小问题，经历了两次重做，终于能够正常的写东西并且在网站里能看见了。今天年二十九，算是在年三十之前搞完了。</p><p>​    主题用的Butterfly，感觉还是挺花哨的。本着简洁的原则，其他就基本没做什么，甚至转发和评论系统都没有做（可能是因为懒？反正知道这个站的人也没几个）。<br>​    那么以后要在这里记录一下学习，以及一些杂七杂八的东西了。<br>​    （还是用不习惯vscode写Markdown，喜欢Typora，毕竟花钱买的）<br>​    随便写个sigmoid试试：</p><p>​                     $\Large \sigma{(x)} = \frac{1}{1+e^{-x}}$</p>]]></content>
      
      
      <categories>
          
          <category> 随便写 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>test00</title>
      <link href="/2023/01/20/test00/"/>
      <url>/2023/01/20/test00/</url>
      
        <content type="html"><![CDATA[<h1 id="这是一个测试文件"><a href="#这是一个测试文件" class="headerlink" title="这是一个测试文件"></a>这是一个测试文件</h1><p><strong>测试</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello world&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/01/20/hello-world/"/>
      <url>/2023/01/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
